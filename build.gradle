buildscript{
	repositories{
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
		maven { url 'https://maven.parchmentmc.org' }
	}
	dependencies{
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.parchmentmc:librarian:1.+'
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// ----------------------------------------------------------------------------------------------------------------------------------------

version = '0.0.1-DEV_1'
group = 'twistedgate.overengineered'
archivesBaseName = 'overengineered'

repositories{
	maven {	name = "BlameJared";	url = "https://maven.blamejared.com/" }         // IE & CT Files
	maven { name = "DVS1 Maven FS"; url = "https://dvs1.progwml6.com/files/maven" } // JEI & Tinkers Files
	maven { url = 'https://maven.latmod.com/' }                                     // Needed for JEI
	
	flatDir { dir 'flatdir' }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets{
	main{
		resources{
			srcDirs = [
				"$rootDir/src/main/resources",
				"$rootDir/src/generated/resources"
			]
		}
	}
	
	datagen{
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

minecraft{
    mappings channel: 'parchment', version: version_parchment
	//accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	runs{
		client{
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', 'overengineered'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
			mods{
				overengineered{
					source sourceSets.main
					source sourceSets.datagen
				}
			}
		}
		
		server{
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', 'overengineered'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
			mods{
				overengineered{
					source sourceSets.main
					source sourceSets.datagen
				}
			}
		}
		
		gameTestServer{
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', 'overengineered'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			mods{
				overengineered{
					source sourceSets.main
					source sourceSets.datagen
				}
			}
		}

		data{
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
			args '--mod', 'overengineered',
				 '--all',
				 '--output', file('src/generated/resources/'),
				 '--validate',
				 '--existing', sourceSets.main.resources.srcDirs[0],
				 '--existing-mod', 'immersiveengineering'
			
			mods{
				overengineered{
					source sourceSets.main
					source sourceSets.datagen
				}
			}
		}
	}
}

dependencies{
	minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"
	
	implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${version_ie}")
	//compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${version_ie}:api")
	datagenImplementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${version_ie}:datagen")
	
	compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-1.18.2:${version_ct}")
	
	runtimeOnly fg.deobf("mezz.jei:jei-${version_minecraft}:${version_jei}")
	compileOnly fg.deobf("mezz.jei:jei-${version_minecraft}:${version_jei}:api")
}

jar{
	manifest{
		attributes([
			"Specification-Title"	 : "overengineered",
			"Specification-Vendor"	: "TwistedGate",
			"Specification-Version"   : "1",
			"Implementation-Title"	: project.name,
			"Implementation-Version"  : project.jar.archiveVersion,
			"Implementation-Vendor"   : "TwistedGate",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')
// publish.dependsOn('reobfJar')

publishing{
    publications{
        mavenJava(MavenPublication){ artifact jar }
    }
	repositories{
		maven { url "file://${project.projectDir}/mcmodsrepo" }
	}
}

tasks.withType(JavaCompile).configureEach{
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
